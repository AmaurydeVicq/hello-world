# Amend data
BE_DR$Year <- as.integer(BE_DR$Year)
NL_DR$Year <- as.integer(NL_DR$Year)
FR_DR$Year <- as.integer(FR_DR$Year)
DE_DR$Year <- as.integer(DE_DR$Year)
USA_DR$Year <- as.integer(DE_DR$Year)
# Load packages
library(dplyr)
install.packages("xslx")
# Effects of Pandemics on Financial Crises
# Load packages
library(dplyr)
library(readxl)
library(xlsx)
# Load in data
BE_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/BE_DeathRate.txt", sep="")
NL_DR <- read_excel("C:/Users/Amaur/Desktop/hello-world/Data/NL_DR.xlsx")
FR_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/FR_DeathRate.txt", sep="")
DE_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/DE_DeathRate.txt", sep="")
USA_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/USA_DeathRate.txt", sep="")
# Amend data
BE_DR$Year <- as.integer(BE_DR$Year)
NL_DR$Year <- as.integer(NL_DR$Year)
FR_DR$Year <- as.integer(FR_DR$Year)
DE_DR$Year <- as.integer(DE_DR$Year)
USA_DR$Year <- as.integer(DE_DR$Year)
# Load packages
library(dplyr)
# Join datasets
BENL_DR <- full_join(BE_DR,NL_DR, by = "Year")
FRDR_DR <- full_join(DE_DR, FR_DR, by = "Year")
EU_DR <- full_join(BENL_DR,FRDR_DR, by = "Year")
ALL_DR <- full_join(EU_DR,USA_DR, by = "Year")
View(BE_DR)
BE <- BE_DR[1,2,5]
# Effects of Pandemics on Financial Crises
# Load packages
library(dplyr)
library(readxl)
library(xlsx)
library(tidyr)
# Load in data
BE_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/BE_DeathRate.txt", sep="")
NL_DR <- read_excel("C:/Users/Amaur/Desktop/hello-world/Data/NL_DR.xlsx")
FR_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/FR_DeathRate.txt", sep="")
DE_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/DE_DeathRate.txt", sep="")
USA_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/USA_DeathRate.txt", sep="")
# Amend data
BE_DR$Year <- as.integer(BE_DR$Year)
NL_DR$Year <- as.integer(NL_DR$Year)
FR_DR$Year <- as.integer(FR_DR$Year)
DE_DR$Year <- as.integer(DE_DR$Year)
USA_DR$Year <- as.integer(DE_DR$Year)
BE <- BE_DR %>% select(1,2,5)
View(BE)
# Effects of Pandemics on Financial Crises
# Load packages
library(dplyr)
library(readxl)
library(xlsx)
library(tidyr)
# Load in data
BE_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/BE_DeathRate.txt", sep="")
NL_DR <- read_excel("C:/Users/Amaur/Desktop/hello-world/Data/NL_DR.xlsx")
FR_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/FR_DeathRate.txt", sep="")
DE_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/DE_DeathRate.txt", sep="")
USA_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/USA_DeathRate.txt", sep="")
# Amend data
BE_DR$Year <- as.integer(BE_DR$Year)
NL_DR$Year <- as.integer(NL_DR$Year)
FR_DR$Year <- as.integer(FR_DR$Year)
DE_DR$Year <- as.integer(DE_DR$Year)
USA_DR$Year <- as.integer(DE_DR$Year)
BE <- BE_DR %>% select(1,2,5)
NL <- NL_DR %>% select(1,2,5)
FR <- FR_DR %>% select(1,2,5)
DE <- DE_DR %>% select(1,2,5)
USA <- USA_DR %>% select(1,2,5)
# Effects of Pandemics on Financial Crises
# Load packages
library(dplyr)
library(readxl)
library(xlsx)
library(tidyr)
# Load in data
BE_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/BE_DeathRate.txt", sep="")
NL_DR <- read_excel("C:/Users/Amaur/Desktop/hello-world/Data/NL_DR.xlsx")
FR_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/FR_DeathRate.txt", sep="")
DE_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/DE_DeathRate.txt", sep="")
USA_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/USA_DeathRate.txt", sep="")
# Amend data
BE_DR$Year <- as.integer(BE_DR$Year)
NL_DR$Year <- as.integer(NL_DR$Year)
FR_DR$Year <- as.integer(FR_DR$Year)
DE_DR$Year <- as.integer(DE_DR$Year)
USA_DR$Year <- as.integer(DE_DR$Year)
BE <- BE_DR %>% select(1,2,5)
NL <- NL_DR %>% select(1,2,5)
FR <- FR_DR %>% select(1,2,5)
DE <- DE_DR %>% select(1,2,5)
USA <- USA_DR %>% select(1,2,5)
# Join datasets
BENL <- full_join(BE,NL, by = "Year")
FRDR <- full_join(DE, FR, by = "Year")
EU <- full_join(BEN,FRDR, by = "Year")
# Effects of Pandemics on Financial Crises
# Load packages
library(dplyr)
library(readxl)
library(xlsx)
library(tidyr)
# Load in data
BE_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/BE_DeathRate.txt", sep="")
NL_DR <- read_excel("C:/Users/Amaur/Desktop/hello-world/Data/NL_DR.xlsx")
FR_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/FR_DeathRate.txt", sep="")
DE_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/DE_DeathRate.txt", sep="")
USA_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/USA_DeathRate.txt", sep="")
# Amend data
BE_DR$Year <- as.integer(BE_DR$Year)
NL_DR$Year <- as.integer(NL_DR$Year)
FR_DR$Year <- as.integer(FR_DR$Year)
DE_DR$Year <- as.integer(DE_DR$Year)
USA_DR$Year <- as.integer(DE_DR$Year)
BE <- BE_DR %>% select(1,2,5)
NL <- NL_DR %>% select(1,2,5)
FR <- FR_DR %>% select(1,2,5)
DE <- DE_DR %>% select(1,2,5)
USA <- USA_DR %>% select(1,2,5)
# Join datasets
BENL <- full_join(BE,NL, by = "Year")
FRDE <- full_join(DE, FR, by = "Year")
EU <- full_join(BENL,FRDE, by = "Year")
ALL <- full_join(EU,USA, by = "Year")
BE <- BE_DR %>% select(1,2,5, year >= 1900)
BE <- BE_DR %>% select(1,2,5, Year >= 1900)
BE <- BE_DR %>% select(1,2,5, "Year" >= 1900)
BE <- BE_DR %>% select(1,2,5) %>% filter(Year >= 1900)
View(BE)
# Effects of Pandemics on Financial Crises
# Load packages
library(dplyr)
library(readxl)
library(xlsx)
library(tidyr)
# Load in data
BE_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/BE_DeathRate.txt", sep="")
NL_DR <- read_excel("C:/Users/Amaur/Desktop/hello-world/Data/NL_DR.xlsx")
FR_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/FR_DeathRate.txt", sep="")
DE_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/DE_DeathRate.txt", sep="")
USA_DR <-  read.csv("C:/Users/Amaur/Desktop/hello-world/Data/USA_DeathRate.txt", sep="")
# Amend data
BE_DR$Year <- as.integer(BE_DR$Year)
NL_DR$Year <- as.integer(NL_DR$Year)
FR_DR$Year <- as.integer(FR_DR$Year)
DE_DR$Year <- as.integer(DE_DR$Year)
USA_DR$Year <- as.integer(DE_DR$Year)
BE <- BE_DR %>% select(1,2,5) %>% filter(Year >= 1900)
NL <- NL_DR %>% select(1,2,5) %>% filter(Year >= 1900)
FR <- FR_DR %>% select(1,2,5) %>% filter(Year >= 1900)
DE <- DE_DR %>% select(1,2,5) %>% filter(Year >= 1900)
USA <- USA_DR %>% select(1,2,5) %>% filter(Year >= 1900)
# Join datasets
BENL <- full_join(BE,NL, by = "Year")
FRDE <- full_join(DE, FR, by = "Year")
EU <- full_join(BENL,FRDE, by = "Year")
library(readxl)
SPC <- read_excel("C:/Users/Amaur/Desktop/hello-world/Data/SPC.xlsx")
View(SPC)
library(readxl)
AEX <- read_excel("C:/Users/Amaur/Desktop/hello-world/Data/AEX.xlsx")
View(AEX)
library(shiny)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Yo Sexy!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Yo Sexy!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Yo Sexy!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
summary(faithful)
summary(faithful)
library(shiny)
runExample("01_hello")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
setwd("C:/Users/Amaur/Desktop/hello-world/Data")
# Effects of Pandemics on Socio-Economic Indicators
# Load packages
library(dplyr)
library(readxl)
library(xlsx)
library(tidyr)
library(ggplot2)
library(tidyr)
library(readr)
library(lubridate)
library(scales)
library(shiny)
library(rsconnect)
# Load in data
Tests <- read.csv("./Data/Tests.csv")
setwd("C:/Users/Amaur/Desktop/hello-world")
# Effects of Pandemics on Socio-Economic Indicators
# Load packages
library(dplyr)
library(readxl)
library(xlsx)
library(tidyr)
library(ggplot2)
library(tidyr)
library(readr)
library(lubridate)
library(scales)
library(shiny)
library(rsconnect)
# Load in data
Tests <- read.csv("./Data/Tests.csv")
# Effects of Pandemics on Socio-Economic Indicators
# Load packages
library(dplyr)
library(readxl)
library(xlsx)
library(tidyr)
library(ggplot2)
library(tidyr)
library(readr)
library(lubridate)
library(scales)
library(shiny)
library(rsconnect)
# Load in data
Tests <- read.csv("./Data/Tests.csv")
LifeExp <- read.csv("./Data/LifeExp.csv")
ProtectedArea <- read.csv("./Data/ProtectedArea.csv")
Enrollment <- read.csv("./Data/Enrollment.csv")
EduAdult <- read.csv("./Data/EduAdult.csv")
GDP <- read.csv("./Data/GDP.csv")
FluVaccin <- read.csv("./Data/FluVaccin.csv")
EldyPop <- read.csv("./Data/EldyPop.csv")
Pollution <- read.csv("./Data/Pollution.csv")
CO2Emission <- read.csv("./Data/CO2Emission.csv")
Smokers <- read.csv("./Data/Smokers.csv")
TotalNurses <- read.csv("./Data/TotalNurses.csv")
TotalDoctors <- read.csv("./Data/TotalDoctors.csv")
ExpPharma <- read.csv("./Data/ExpPharma.csv")
ExpHealth <- read.csv("./Data/ExpHealth.csv")
View(EldyPop)
# Effects of Pandemics on Financial Crises
# Load packages
library(dplyr)
library(readxl)
library(xlsx)
library(tidyr)
library(ggplot2)
library(tidyr)
library(readr)
library(lubridate)
library(scales)
# Load in data
setwd("C:/Users/Amaur/Desktop/hello-world/Data")
BE_DR <-  read.csv("BE_DeathRate.txt", sep="")
NL_DR <- read_excel("NL_DR.xlsx")
FR_DR <-  read.csv("FR_DeathRate.txt", sep="")
DE_DR <-  read.csv("DE_DeathRate.txt", sep="")
WDE_DR <-  read.csv("WestDE_DeathRate.txt", sep="")
USA_DR <-  read.csv("USA_DeathRate.txt", sep="")
SPC <- read_excel("SPC.xlsx")
AEX <- read_excel("AEX.xlsx")
GDPC <- read_excel("GDPperCapita.xlsx")
Life <- read_excel("Life.xlsx")
MLife <- read_excel("MLife.xlsx")
TP <- read_excel("TP.xlsx")
BondYield <- read_excel("BondYield.xlsx")
RealWage <- read_excel("RealWage.xlsx")
Debt <- read_excel("Debt.xlsx")
CO2 <- read_excel("CO2.xlsx")
# Amend Mortality data
BE_DR$Year <- as.integer(BE_DR$Year)
NL_DR$Year <- as.integer(NL_DR$Year)
FR_DR$Year <- as.integer(FR_DR$Year)
DE_DR$Year <- as.integer(DE_DR$Year)
WDE_DR$Year <- as.integer(WDE_DR$Year)
USA_DR$Year <- as.integer(DE_DR$Year)
BE <- BE_DR %>%
select(1,2,5) %>%
mutate(country = "Belgium", Age = as.numeric(as.character(Age)), Total = as.numeric(as.character(Total)))
View(BE_DR)
View(BE)
View(ExpPharma)
