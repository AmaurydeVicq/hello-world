unique(Alltogether$Country.Region)
length(unique(Alltogether$Country.Region))
Countries <- length(unique(Alltogether$Country.Region))
length(unique(Alltogether$Country.Region)) %>%
write.table("test.txt")
length(unique(Alltogether$Country.Region)) %>%
write.table("test.txt", row.names = F, col.names = F)
read.table("test.txt")
a <- read.table("test.txt")
View(a)
a <- as.numeric(read.table("test.txt"))
Countries <- as.numeric(read.table("test.txt"))
Countries
data(Europe)
data(World)
plot(World)
PerCountry <- Alltogether %>%
group_by(Country.Region, name) %>%
summarise(Confirmed = sum(Confirmed),
Deaths = sum(Deaths),
Recovered = sum(Recovered))
PerCountry <- PerCountry %>%
ungroup(Country.Region) %>%
mutate(Country.Region = as.character(Country.Region))
PerCountry$Country.Region[PerCountry$Country.Region == "US"] <- "United States"
firstday <- PerCountry %>%
group_by(Country.Region) %>%
filter(Confirmed > 0) %>%
mutate(firstday = min(name)) %>%
select(Country.Region, firstday) %>%
distinct()
PerCountry <- merge(PerCountry, firstday)
PerCountry <- PerCountry %>%
mutate(sincefirstday = name - firstday)
day100 <- PerCountry %>%
group_by(Country.Region) %>%
filter(Confirmed > 99) %>%
mutate(daymore100 = min(name)) %>%
select(Country.Region, daymore100) %>%
distinct()
PerCountry <- left_join(PerCountry, day100)
PerCountry <- PerCountry %>%
mutate(sincehunday = name - daymore100)
View(PerCountry)
leaflet() %>%
setView(lng = 46.2044, lat = 6.1432, zoom = 12)
library(leaflet)
leaflet() %>%
setView(lng = 46.2044, lat = 6.1432, zoom = 12)
leaflet() %>%
setView(lng = 46.2044, lat = 6.1432, zoom = 12)
leaflet() %>%
setView(lng = 46.2044, lat = 6.1432, zoom = 12) %>%
addTiles()
leaflet() %>%
setView(lng = 6.1432, lat = 46.2044, zoom = 12) %>%
addTiles()
leaflet() %>%
setView(lng = 6.1432, lat = 46.2044, zoom = 1) %>%
addTiles()
leaflet() %>%
setView(lng = 6.1432, lat = 46.2044, zoom = 5) %>%
addTiles()
leaflet() %>%
setView(lng = 6.1432, lat = 46.2044, zoom = 4) %>%
addTiles()
leaflet() %>%
setView(lng = 6.1432, lat = 46.2044, zoom =3.74) %>%
addTiles()
leaflet() %>%
setView(lng = 6.1432, lat = 46.2044, zoom =3.5) %>%
addTiles()
TheWorld <- readOGR(layer = "CNTR_RG_60M_2016_3035", dsn = "Data")
TheWorld <- readOGR(layer = "CNTR_RG_60M_2016_3035", dsn = "../Data")
tmap(TheWorld)
plot(TheWorld)
TheWorld <- readOGR(layer = "CNTR_BN_60M_2016_3857_INLAND", dsn = "../Data")
plot(TheWorld)
TheWorld <- readOGR(layer = "CNTR_BN_60M_2016_4326", dsn = "../Data")
plot(TheWorld)
TheWorld <- readOGR(layer = "CNTR_BN_60M_2016_3035", dsn = "../Data")
plot(TheWorld)
TheWorld <- readOGR(layer = "NUTS_BN_60M_2016_3857",
dsn = "../Data")
plot(TheWorld)
View(TheWorld)
plot(TheWorld)
TheWorld <- readOGR(layer = "NUTS_RG_60M_2016_4326_LEVL_0",
dsn = "../Data")
plot(TheWorld)
NUTS_RG_60M_2016_4326_LEVL_0
plot(TheWorld)
TheWorld <- readOGR(layer = "NUTS_BN_10M_2016_3035",
dsn = "../Data")
plot(TheWorld)
TheWorld <- readOGR(layer = "NUTS_BN_10M_2016_3035_LEVL_0",
dsn = "../Data")
plot(TheWorld)
plot(TheWorld)
View(TheWorld)
View(TheWorld)
TheWorld <- readOGR(layer = "NUTS_LB_2016_3035_LEVL_0",
dsn = "../Data")
plot(TheWorld)
View(TheWorld)
TheWorld <- readOGR(layer = "NUTS_RG_10M_2016_3035",
dsn = "../Data")
plot(TheWorld)
View(TheWorld)
TheWorld <- readOGR(layer = "NUTS_BN_10M_2016_4326_LEVL_0",
dsn = "../Data")
plot(TheWorld)
View(TheWorld)
View(TheWorld@data)
TheWorld <- readOGR(layer = "NUTS_RG_03M_2016_3035_LEVL_1",
dsn = "../Data")
plot(TheWorld)
View(TheWorld)
TheWorld <- readOGR(layer = "NUTS_RG_03M_2016_3035_LEVL_0",
dsn = "../Data")
plot(TheWorld)
View(TheWorld)
Europe <- readOGR(layer = "NUTS_RG_03M_2016_3035_LEVL_0",
dsn = "../Data")
View(Europe)
countrycodes <- read_html("https://ec.europa.eu/eurostat/statistics-explained/index.php/Tutorial:Country_codes_and_protocol_order#EU.C2.A0and_euro_area_aggregates") %>%
html_nodes("div.content-section:nth-child(2) > table:nth-child(2)") %>%
read_table(fill = true)
countrycodes <- read_html("https://ec.europa.eu/eurostat/statistics-explained/index.php/Tutorial:Country_codes_and_protocol_order#EU.C2.A0and_euro_area_aggregates") %>%
html_nodes("div.content-section:nth-child(2) > table:nth-child(2)") %>%
read_table(fill = TRUE)
countrycodes <- read_html("https://ec.europa.eu/eurostat/statistics-explained/index.php/Tutorial:Country_codes_and_protocol_order#EU.C2.A0and_euro_area_aggregates") %>%
html_nodes("div.content-section:nth-child(2) > table:nth-child(2)") %>%
read_table()
read_html("https://ec.europa.eu/eurostat/statistics-explained/index.php/Tutorial:Country_codes_and_protocol_order#EU.C2.A0and_euro_area_aggregates") %>%
html_nodes("div.content-section:nth-child(2) > table:nth-child(2)") %>%
html_table()
read_html("https://ec.europa.eu/eurostat/statistics-explained/index.php/Tutorial:Country_codes_and_protocol_order#EU.C2.A0and_euro_area_aggregates") %>%
html_nodes("div.content-section:nth-child(2) > table:nth-child(2)")
read_html("https://ec.europa.eu/eurostat/statistics-explained/index.php/Tutorial:Country_codes_and_protocol_order#EU.C2.A0and_euro_area_aggregates") %>%
html_nodes("div.content-section:nth-child(2) > table:nth-child(2)") %>%
extract2(1) %>%
html_table()
countrycodes <- read_html("https://ec.europa.eu/eurostat/statistics-explained/index.php/Tutorial:Country_codes_and_protocol_order#EU.C2.A0and_euro_area_aggregates") %>%
html_nodes("div.content-section:nth-child(2) > table:nth-child(2)") %>%
extract2(1) %>%
html_table()
View(countrycodes)
countrycodes <- read_html("https://ec.europa.eu/eurostat/statistics-explained/index.php/Tutorial:Country_codes_and_protocol_order#EU.C2.A0and_euro_area_aggregates") %>%
html_nodes("div.content-section:nth-child(2) > table:nth-child(2)") %>%
extract2(1) %>%
html_table() %>%
select(1,3)
View(countrycodes)
View(Europe)
View(Europa@data)
View(Europe@data
)
View(countrycodes)
read.csv("list-eurostat-eea-and-fao-country-codes-side-by-side.csv")
read.csv("./data/list-eurostat-eea-and-fao-country-codes-side-by-side.csv")
read.csv("/data/list-eurostat-eea-and-fao-country-codes-side-by-side.csv")
read.csv("data/list-eurostat-eea-and-fao-country-codes-side-by-side.csv")
read.csv("../Data/list-eurostat-eea-and-fao-country-codes-side-by-side.csv")
countrycodes <- read.csv("../Data/list-eurostat-eea-and-fao-country-codes-side-by-side.csv")
View(countrycodes)
View(countrycodes)
countrycodes <- read.csv("../Data/list-eurostat-eea-and-fao-country-codes-side-by-side.csv") %>%
filter(1:38) %>%
select(1,6)
countrycodes <- read.csv("../Data/list-eurostat-eea-and-fao-country-codes-side-by-side.csv") %>%
subset(1:38) %>%
select(1,6)
countrycodes <- read.csv("../Data/list-eurostat-eea-and-fao-country-codes-side-by-side.csv") %>%
subset(1:38,) %>%
select(1,6)
?filter
countrycodes <- read.csv("../Data/list-eurostat-eea-and-fao-country-codes-side-by-side.csv") %>%
filter(which(1) < 39) %>%
select(1,6)
countrycodes <- read.csv("../Data/list-eurostat-eea-and-fao-country-codes-side-by-side.csv")
countrycodes[1:38,]
countrycodes <- countrycodes[1:38,c(1,6)]
View(countrycodes)
sp::merge(Europe, countrynames)
sp::merge(Europe, countrycodes)
Europe <- readOGR(layer = "NUTS_RG_03M_2016_3035_LEVL_0",
dsn = "../Data")
Europe <- readOGR(layer = "NUTS_RG_03M_2016_3035_LEVL_0",
dsn = "../Data")
countrycodes <- read.csv("../Data/list-eurostat-eea-and-fao-country-codes-side-by-side.csv")
countrycodes <- countrycodes[1:38,c(1,6)]
plot(Europe)
sp::merge(Europe, countrycodes)
sp::merge(Europe, countrycodes, by.x = "CNTR_CODE", by.y = "name.text")
test <- sp::merge(Europe, countrycodes, by.x = "CNTR_CODE", by.y = "name.text")
View(test)
View(test@data)
test <- sp::merge(Europe, countrycodes, by.x = as.character("CNTR_CODE"), by.y = "name.text")
View(test)
View(test@data)
test <- sp::merge(Europe, countrycodes, by.x = "CNTR_CODE", by.y = "estatcode.text")
View(test@data)
Europe <- sp::merge(Europe, countrycodes, by.x = "CNTR_CODE", by.y = "estatcode.text")
View(countrycodes)
PerCountry %>%
filter(name %in% countrycodes$name.text)
View(PerCountry)
PerCountry %>%
filter(Country.Region %in% countrycodes$name.text)
EuropeCorona <- PerCountry %>%
filter(Country.Region %in% countrycodes$name.text) %>%
filter(name == sys.Date() -1)
EuropeCorona <- PerCountry %>%
filter(Country.Region %in% countrycodes$name.text) %>%
filter(name == Sys.Date() -1)
View(EuropeCorona)
sp::merge(Europe, EuropeCorona)
View(Europe@data)
sp::merge(Europe, EuropeCorona, by.x = "name.text", by.y = "Country.Region")
Europe <- sp::merge(Europe, EuropeCorona, by.x = "name.text", by.y = "Country.Region")
View(Europe)
qtm(Europe, fill = "Confirmed",
fill.breaks = c(0,1, 10,100,1000,10000,20000, Inf))
View(countrycodes)
View(PerCountry)
# Making a list
Corona <- list(Confirmed, Deaths, Recovered)
# How many columns?
a <- ncol(Confirmed)
#Let's convert each of the dataframes to a 'long format'
Corona <- lapply(Corona, pivot_longer, 5:a)
#Change the date strings to real dates
Corona <- lapply(Corona, mutate, name = str_replace(name, "X", ""))
Corona<- lapply(Corona, mutate, name = mdy(name))
Alltogether <- merge(Corona[[1]], Corona[[2]],
by = c('Province.State',
'Country.Region',
'Long',
'Lat',
'name'))
Alltogether <- merge(Alltogether, Corona[[3]],
by = c('Province.State',
'Country.Region',
'Long',
'Lat',
'name'))
#Renaming the variables
names(Alltogether)[6:8] <- c("Confirmed", "Deaths", "Recovered")
Keystats <- Alltogether %>%
filter(name == max(name)) %>%
summarise(Confirmed = sum(Confirmed), Deaths = sum(Deaths), Recovered = sum(Recovered))
write.csv(Keystats, "Keystats.csv")
length(unique(Alltogether$Country.Region)) %>%
write.table("countries.txt", row.names = F, col.names = F)
kable(Keystats, caption = "Key statistics",
booktabs = TRUE,
row.names = FALSE,
format = "markdown",
position = "center")
PerCountry <- Alltogether %>%
group_by(Country.Region, name) %>%
summarise(Confirmed = sum(Confirmed),
Deaths = sum(Deaths),
Recovered = sum(Recovered))
PerCountry <- PerCountry %>%
ungroup(Country.Region) %>%
mutate(Country.Region = as.character(Country.Region))
#Correct a few country names
PerCountry$Country.Region[PerCountry$Country.Region == "US"] <- "United States"
PerCountry$Country.Region[PerCountry$Country.Region == "Czechia"] <- "Czech Republic"
firstday <- PerCountry %>%
group_by(Country.Region) %>%
filter(Confirmed > 0) %>%
mutate(firstday = min(name)) %>%
select(Country.Region, firstday) %>%
distinct()
PerCountry <- merge(PerCountry, firstday)
PerCountry <- PerCountry %>%
mutate(sincefirstday = name - firstday)
day100 <- PerCountry %>%
group_by(Country.Region) %>%
filter(Confirmed > 99) %>%
mutate(daymore100 = min(name)) %>%
select(Country.Region, daymore100) %>%
distinct()
PerCountry <- left_join(PerCountry, day100)
PerCountry <- PerCountry %>%
mutate(sincehunday = name - daymore100)
qtm(Europe, fill = "Confirmed",
fill.palette = "viridis",
fill.breaks = c(0,1, 10,100,1000,10000,20000, Inf))
Europe <- readOGR(layer = "NUTS_RG_03M_2016_3035_LEVL_0",
dsn = "../Data")
countrycodes <- read.csv("../Data/list-eurostat-eea-and-fao-country-codes-side-by-side.csv")
countrycodes <- countrycodes[1:38,c(1,6)]
plot(Europe)
Europe <- sp::merge(Europe, countrycodes, by.x = "CNTR_CODE", by.y = "estatcode.text")
EuropeCorona <- PerCountry %>%
filter(Country.Region %in% countrycodes$name.text) %>%
filter(name == Sys.Date() -1)
Europe <- sp::merge(Europe, EuropeCorona, by.x = "name.text", by.y = "Country.Region")
qtm(Europe, fill = "Confirmed",
fill.palette = "viridis",
fill.breaks = c(0,1, 10,100,1000,10000,20000, Inf))
m1 <- qtm(Europe, fill = "Confirmed",
fill.palette = "viridis",
fill.breaks = c(0,1, 10,100,1000,10000,20000, Inf))
tmap_leaflet(m1)
View(countrycodes)
Europe <- readOGR(layer = "NUTS_RG_03M_2016_3035_LEVL_0",
dsn = "../Data")
plot(Europe)
View(Europe)
View(Europe@data)
countrycodes <- read.csv("../Data/list-eurostat-eea-and-fao-country-codes-side-by-side.csv")
countrycodes <- countrycodes[1:38,c(1,6)]
Europe <- sp::merge(Europe, countrycodes, by.x = "CNTR_CODE", by.y = "estatcode.text")
EuropeCorona <- PerCountry %>%
filter(Country.Region %in% countrycodes$name.text) %>%
filter(name == Sys.Date() -1)
Europe <- sp::merge(Europe, EuropeCorona, by.x = "name.text", by.y = "Country.Region")
m1 <- qtm(Europe, fill = "Confirmed",
fill.palette = "viridis",
fill.breaks = c(0,1, 10,100,1000,10000,20000, Inf))
tmap_leaflet(m1)
tmap_leaflet(m1)
Confirmed <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv")
Deaths <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv")
Recovered <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv")
# Making a list
Corona <- list(Confirmed, Deaths, Recovered)
# How many columns?
a <- ncol(Confirmed)
#Let's convert each of the dataframes to a 'long format'
Corona <- lapply(Corona, pivot_longer, 5:a)
#Change the date strings to real dates
Corona <- lapply(Corona, mutate, name = str_replace(name, "X", ""))
Corona<- lapply(Corona, mutate, name = mdy(name))
Alltogether <- merge(Corona[[1]], Corona[[2]],
by = c('Province.State',
'Country.Region',
'Long',
'Lat',
'name'))
Alltogether <- merge(Alltogether, Corona[[3]],
by = c('Province.State',
'Country.Region',
'Long',
'Lat',
'name'))
#Renaming the variables
names(Alltogether)[6:8] <- c("Confirmed", "Deaths", "Recovered")
Keystats <- Alltogether %>%
filter(name == max(name)) %>%
summarise(Confirmed = sum(Confirmed), Deaths = sum(Deaths), Recovered = sum(Recovered))
write.csv(Keystats, "Keystats.csv")
length(unique(Alltogether$Country.Region)) %>%
write.table("countries.txt", row.names = F, col.names = F)
kable(Keystats, caption = "Key statistics",
booktabs = TRUE,
row.names = FALSE,
format = "markdown",
position = "center")
PerCountry <- Alltogether %>%
group_by(Country.Region, name) %>%
summarise(Confirmed = sum(Confirmed),
Deaths = sum(Deaths),
Recovered = sum(Recovered))
PerCountry <- PerCountry %>%
ungroup(Country.Region) %>%
mutate(Country.Region = as.character(Country.Region))
#Correct a few country names
PerCountry$Country.Region[PerCountry$Country.Region == "US"] <- "United States"
PerCountry$Country.Region[PerCountry$Country.Region == "Czechia"] <- "Czech Republic"
firstday <- PerCountry %>%
group_by(Country.Region) %>%
filter(Confirmed > 0) %>%
mutate(firstday = min(name)) %>%
select(Country.Region, firstday) %>%
distinct()
PerCountry <- merge(PerCountry, firstday)
PerCountry <- PerCountry %>%
mutate(sincefirstday = name - firstday)
day100 <- PerCountry %>%
group_by(Country.Region) %>%
filter(Confirmed > 99) %>%
mutate(daymore100 = min(name)) %>%
select(Country.Region, daymore100) %>%
distinct()
PerCountry <- left_join(PerCountry, day100)
PerCountry <- PerCountry %>%
mutate(sincehunday = name - daymore100)
Europe <- readOGR(layer = "NUTS_RG_03M_2016_3035_LEVL_0",
dsn = "../Data")
countrycodes <- read.csv("../Data/list-eurostat-eea-and-fao-country-codes-side-by-side.csv")
countrycodes <- countrycodes[1:38,c(1,6)]
Europe <- sp::merge(Europe, countrycodes, by.x = "CNTR_CODE", by.y = "estatcode.text")
EuropeCorona <- PerCountry %>%
filter(Country.Region %in% countrycodes$name.text) %>%
filter(name == Sys.Date() -1)
Europe <- sp::merge(Europe, EuropeCorona, by.x = "name.text", by.y = "Country.Region")
m1 <- qtm(Europe, fill = "Confirmed",
fill.palette = "viridis",
fill.breaks = c(0,1, 10,100,1000,10000,20000, Inf))
m1
View(Europe)
View(Europe@data)
Confirmed <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv")
Deaths <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv")
Recovered <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv")
# Making a list
Corona <- list(Confirmed, Deaths, Recovered)
# How many columns?
a <- ncol(Confirmed)
#Let's convert each of the dataframes to a 'long format'
Corona <- lapply(Corona, pivot_longer, 5:a)
#Change the date strings to real dates
Corona <- lapply(Corona, mutate, name = str_replace(name, "X", ""))
Corona<- lapply(Corona, mutate, name = mdy(name))
Alltogether <- merge(Corona[[1]], Corona[[2]],
by = c('Province.State',
'Country.Region',
'Long',
'Lat',
'name'))
Alltogether <- merge(Alltogether, Corona[[3]],
by = c('Province.State',
'Country.Region',
'Long',
'Lat',
'name'))
#Renaming the variables
names(Alltogether)[6:8] <- c("Confirmed", "Deaths", "Recovered")
View(Alltogether)
Keystats <- Alltogether %>%
filter(name == max(name)) %>%
summarise(Confirmed = sum(Confirmed), Deaths = sum(Deaths), Recovered = sum(Recovered))
write.csv(Keystats, "Keystats.csv")
length(unique(Alltogether$Country.Region)) %>%
write.table("countries.txt", row.names = F, col.names = F)
kable(Keystats, caption = "Key statistics",
booktabs = TRUE,
row.names = FALSE,
format = "markdown",
position = "center")
PerCountry <- Alltogether %>%
group_by(Country.Region, name) %>%
summarise(Confirmed = sum(Confirmed),
Deaths = sum(Deaths),
Recovered = sum(Recovered))
View(PerCountry)
PerCountry <- PerCountry %>%
ungroup(Country.Region) %>%
mutate(Country.Region = as.character(Country.Region))
View(PerCountry)
#Correct a few country names
PerCountry$Country.Region[PerCountry$Country.Region == "US"] <- "United States"
View(PerCountry)
PerCountry$Country.Region[PerCountry$Country.Region == "Czechia"] <- "Czech Republic"
View(PerCountry)
firstday <- PerCountry %>%
group_by(Country.Region) %>%
filter(Confirmed > 0) %>%
mutate(firstday = min(name)) %>%
select(Country.Region, firstday) %>%
distinct()
PerCountry <- merge(PerCountry, firstday)
View(PerCountry)
PerCountry <- PerCountry %>%
mutate(sincefirstday = name - firstday)
View(PerCountry)
day100 <- PerCountry %>%
group_by(Country.Region) %>%
filter(Confirmed > 99) %>%
mutate(daymore100 = min(name)) %>%
select(Country.Region, daymore100) %>%
distinct()
PerCountry <- left_join(PerCountry, day100)
View(PerCountry)
PerCountry <- PerCountry %>%
mutate(sincehunday = name - daymore100)
View(PerCountry)
Europe <- readOGR(layer = "NUTS_RG_03M_2016_3035_LEVL_0",
dsn = "../Data")
countrycodes <- countrycodes[1:38,c(1,6)]
countrycodes <- read.csv("../Data/list-eurostat-eea-and-fao-country-codes-side-by-side.csv")
countrycodes <- countrycodes[1:38,c(1,6)]
View(countrycodes)
View(countrycodes)
Europe <- sp::merge(Europe, countrycodes, by.x = "CNTR_CODE", by.y = "estatcode.text")
View(Europe@data)
EuropeCorona <- PerCountry %>%
filter(Country.Region %in% countrycodes$name.text) %>%
filter(name == Sys.Date() -1)
View(EuropeCorona)
EuropeCorona <- PerCountry %>%
filter(Country.Region %in% countrycodes$name.text) %>%
filter(name == Sys.Date() -2)
Europe <- sp::merge(Europe, EuropeCorona, by.x = "name.text", by.y = "Country.Region")
m1 <- qtm(Europe, fill = "Confirmed",
fill.palette = "viridis",
fill.breaks = c(0,1, 10,100,1000,10000,20000, Inf))
tmap_leaflet(m1)
m1 <- qtm(Europe, fill = "Confirmed",
fill.palette = "viridis",
fill.breaks = c(0,1, 10,100,1000,2000,10000,20000, Inf))
m1 <- qtm(Europe, fill = "Confirmed",
fill.palette = "viridis",
fill.breaks = c(0,1, 10,100,1000,2000,5000, 10000, Inf))
tmap_leaflet(m1)
?tmap_leaflet
